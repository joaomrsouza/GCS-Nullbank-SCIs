-- MySQL Script generated by MySQL Workbench
-- Mon Feb 24 19:56:08 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Equipe521459
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Equipe521459` ;

-- -----------------------------------------------------
-- Schema Equipe521459
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Equipe521459` DEFAULT CHARACTER SET utf8 ;
USE `Equipe521459` ;

-- -----------------------------------------------------
-- Table `Equipe521459`.`agencias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`agencias` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`agencias` (
  `num_ag` INT NOT NULL AUTO_INCREMENT,
  `nome_ag` VARCHAR(80) NOT NULL,
  `cidade_ag` VARCHAR(80) NOT NULL,
  `sal_total` REAL NOT NULL DEFAULT 0,
  PRIMARY KEY (`num_ag`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`clientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`clientes` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`clientes` (
  `cpf` CHAR(11) NOT NULL,
  `nome` VARCHAR(80) NOT NULL,
  `data_nasc` DATE NOT NULL,
  `rg_num` VARCHAR(15) NOT NULL,
  `rg_orgao_emissor` VARCHAR(80) NOT NULL,
  `rg_uf` CHAR(2) NOT NULL,
  `end_tipo` VARCHAR(80) NOT NULL,
  `end_logradouro` VARCHAR(80) NOT NULL,
  `end_numero` INT NOT NULL,
  `end_bairro` VARCHAR(80) NOT NULL,
  `end_cep` CHAR(8) NOT NULL,
  `end_cidade` VARCHAR(80) NOT NULL,
  `end_estado` CHAR(2) NOT NULL,
  PRIMARY KEY (`cpf`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`clientes_has_contas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`clientes_has_contas` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`clientes_has_contas` (
  `contas_num_conta` INT NOT NULL,
  `clientes_cpf` CHAR(11) NOT NULL,
  PRIMARY KEY (`contas_num_conta`, `clientes_cpf`),
  INDEX `fk_clientes_has_contas_contas1_idx` (`contas_num_conta` ASC) VISIBLE,
  INDEX `fk_clientes_has_contas_clientes1_idx` (`clientes_cpf` ASC) VISIBLE,
  CONSTRAINT `fk_clientes_has_contas_clientes1`
    FOREIGN KEY (`clientes_cpf`)
    REFERENCES `Equipe521459`.`clientes` (`cpf`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_clientes_has_contas_contas1`
    FOREIGN KEY (`contas_num_conta`)
    REFERENCES `Equipe521459`.`contas` (`num_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`contas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`contas` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`contas` (
  `num_conta` INT NOT NULL AUTO_INCREMENT,
  `agencias_num_ag` INT NOT NULL,
  `funcionarios_matricula_gerente` INT NOT NULL,
  `tipo` ENUM('corrente', 'poupança', 'especial') NOT NULL,
  `saldo` REAL UNSIGNED NOT NULL DEFAULT 0,
  `senha` CHAR(44) NOT NULL,
  `salt` CHAR(44) NOT NULL,
  PRIMARY KEY (`num_conta`, `agencias_num_ag`),
  INDEX `fk_contas_funcionarios1_idx` (`funcionarios_matricula_gerente` ASC) VISIBLE,
  INDEX `fk_contas_agencias2_idx` (`agencias_num_ag` ASC) VISIBLE,
  CONSTRAINT `fk_contas_funcionarios1`
    FOREIGN KEY (`funcionarios_matricula_gerente`)
    REFERENCES `Equipe521459`.`funcionarios` (`matricula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_contas_agencias2`
    FOREIGN KEY (`agencias_num_ag`)
    REFERENCES `Equipe521459`.`agencias` (`num_ag`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`contas_corrente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`contas_corrente` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`contas_corrente` (
  `contas_num_conta` INT NOT NULL,
  `data_aniversario` DATE NOT NULL,
  PRIMARY KEY (`contas_num_conta`),
  INDEX `fk_contas_corrente_contas1_idx` (`contas_num_conta` ASC) VISIBLE,
  CONSTRAINT `fk_contas_corrente_contas1`
    FOREIGN KEY (`contas_num_conta`)
    REFERENCES `Equipe521459`.`contas` (`num_conta`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`contas_especial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`contas_especial` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`contas_especial` (
  `contas_num_conta` INT NOT NULL,
  `limite_credito` REAL NOT NULL,
  PRIMARY KEY (`contas_num_conta`),
  INDEX `fk_contas_especial_contas1_idx` (`contas_num_conta` ASC) VISIBLE,
  CONSTRAINT `fk_contas_especial_contas1`
    FOREIGN KEY (`contas_num_conta`)
    REFERENCES `Equipe521459`.`contas` (`num_conta`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`contas_poupanca`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`contas_poupanca` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`contas_poupanca` (
  `contas_num_conta` INT NOT NULL,
  `taxa_juros` REAL NOT NULL,
  PRIMARY KEY (`contas_num_conta`),
  INDEX `fk_contas_poupanca_contas1_idx` (`contas_num_conta` ASC) VISIBLE,
  CONSTRAINT `fk_contas_poupanca_contas1`
    FOREIGN KEY (`contas_num_conta`)
    REFERENCES `Equipe521459`.`contas` (`num_conta`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`dependentes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`dependentes` ;

-- ! ALTERAÇÃO: Removido fórmula do valor padrão da idade (Não funciona colocar um valor padrão dependente de outro campo)
CREATE TABLE IF NOT EXISTS `Equipe521459`.`dependentes` (
  `nome_dependente` VARCHAR(80) NOT NULL,
  `funcionarios_matricula` INT NOT NULL,
  `data_nasc` DATE NOT NULL,
  `parentesco` ENUM('filho(a)', 'cônjuge', 'genitor(a)') NOT NULL,
  `idade` INT NULL,
  PRIMARY KEY (`funcionarios_matricula`, `nome_dependente`),
  CONSTRAINT `fk_dependentes_funcionarios1`
    FOREIGN KEY (`funcionarios_matricula`)
    REFERENCES `Equipe521459`.`funcionarios` (`matricula`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`emails`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`emails` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`emails` (
  `email` VARCHAR(254) NOT NULL,
  `clientes_cpf` CHAR(11) NOT NULL,
  `tipo` VARCHAR(80) NULL,
  PRIMARY KEY (`email`, `clientes_cpf`),
  INDEX `fk_emails_clientes1_idx` (`clientes_cpf` ASC) VISIBLE,
  CONSTRAINT `fk_emails_clientes1`
    FOREIGN KEY (`clientes_cpf`)
    REFERENCES `Equipe521459`.`clientes` (`cpf`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`funcionarios`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`funcionarios` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`funcionarios` (
  `matricula` INT NOT NULL AUTO_INCREMENT,
  `agencias_num_ag` INT NOT NULL,
  `nome` VARCHAR(80) NOT NULL,
  `data_nasc` DATE NOT NULL,
  `genero` ENUM('masculino', 'feminino', 'não-binário') NOT NULL,
  `endereco` VARCHAR(80) NOT NULL,
  `cidade` VARCHAR(80) NOT NULL,
  `cargo` ENUM('gerente', 'atendente', 'caixa') NOT NULL,
  `salario` REAL NOT NULL,
  `senha` CHAR(44) NOT NULL,
  `salt` CHAR(44) NOT NULL,
  PRIMARY KEY (`matricula`),
  INDEX `fk_funcionarios_agencias_idx` (`agencias_num_ag` ASC) VISIBLE,
  CONSTRAINT `fk_funcionarios_agencias`
    FOREIGN KEY (`agencias_num_ag`)
    REFERENCES `Equipe521459`.`agencias` (`num_ag`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`telefones`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`telefones` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`telefones` (
  `telefone` CHAR(15) NOT NULL,
  `clientes_cpf` CHAR(11) NOT NULL,
  `tipo` VARCHAR(80) NULL,
  PRIMARY KEY (`telefone`, `clientes_cpf`),
  CONSTRAINT `fk_telefones_clientes1`
    FOREIGN KEY (`clientes_cpf`)
    REFERENCES `Equipe521459`.`clientes` (`cpf`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Equipe521459`.`transacoes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`transacoes` ;

CREATE TABLE IF NOT EXISTS `Equipe521459`.`transacoes` (
  `num_transacao` INT NOT NULL AUTO_INCREMENT,
  `contas_num_conta_origem` INT NOT NULL,
  `contas_num_conta_destino` INT NULL,
  `tipo` ENUM('saque', 'deposito', 'pagamento', 'estorno', 'transferência', 'PIX') NOT NULL,
  `data_hora` DATETIME NOT NULL DEFAULT NOW(),
  `valor` REAL UNSIGNED NOT NULL,
  PRIMARY KEY (`num_transacao`, `contas_num_conta_origem`),
  INDEX `fk_transacoes_contas1_idx` (`contas_num_conta_origem` ASC) VISIBLE,
  INDEX `fk_transacoes_contas2_idx` (`contas_num_conta_destino` ASC) VISIBLE,
  CONSTRAINT `fk_transacoes_contas1`
    FOREIGN KEY (`contas_num_conta_origem`)
    REFERENCES `Equipe521459`.`contas` (`num_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_transacoes_contas2`
    FOREIGN KEY (`contas_num_conta_destino`)
    REFERENCES `Equipe521459`.`contas` (`num_conta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `Equipe521459` ;

-- ! ALTERAÇÃO: Adiciona as views solicitadas nos itens 4 e 5
-- -----------------------------------------------------
-- Placeholder table for view `Equipe521459`.`contas_por_gerente`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `Equipe521459`.`contas_por_gerente` (`funcionarios_matricula_gerente` INT, `num_conta` INT, `tipo` INT, `saldo` INT, `cpf` INT, `nome` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Equipe521459`.`transacoes_por_conta`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `Equipe521459`.`transacoes_por_conta` (`num_conta` INT, `num_transacao` INT, `tipo` INT, `valor` INT, `data_hora` INT, `contas_num_conta_destino` INT);

-- -----------------------------------------------------
-- View `Equipe521459`.`contas_por_gerente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`contas_por_gerente`;
DROP VIEW IF EXISTS `Equipe521459`.`contas_por_gerente` ;
USE `Equipe521459`;
CREATE  OR REPLACE VIEW `contas_por_gerente` AS
  SELECT
    co.funcionarios_matricula_gerente,
    co.num_conta,
    co.tipo,
    co.saldo,
    ci.cpf,
    ci.nome
  FROM contas co
    JOIN clientes_has_contas clhco
      ON co.num_conta = clhco.contas_num_conta
    JOIN clientes ci
      ON ci.cpf = clhco.clientes_cpf
    ORDER BY co.num_conta ASC, ci.nome ASC;

-- -----------------------------------------------------
-- View `Equipe521459`.`transacoes_por_conta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Equipe521459`.`transacoes_por_conta`;
DROP VIEW IF EXISTS `Equipe521459`.`transacoes_por_conta` ;
USE `Equipe521459`;
CREATE  OR REPLACE VIEW `transacoes_por_conta` AS
  SELECT
    c.num_conta,
    t.num_transacao,
    t.tipo,
    t.valor,
    t.data_hora,
    t.contas_num_conta_destino
  FROM contas c
    JOIN transacoes t
      ON c.num_conta = t.contas_num_conta_origem
  ORDER BY c.num_conta ASC, t.data_hora DESC;
USE `Equipe521459`;

DELIMITER $$

USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`clientes_has_contas_BEFORE_INSERT` $$
USE `Equipe521459`$$
-- Limita em 2 a quantidade de clientes que podem possuir a mesma conta
-- Limita em 1 a quantidade de contas que um cliente pode ter em uma mesma agência

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`clientes_has_contas_BEFORE_INSERT` BEFORE INSERT ON `clientes_has_contas` FOR EACH ROW
BEGIN
	DECLARE qtd_clientes_conta INT;
    DECLARE cliente_has_conta_in_agencia INT;

	-- Conta quantos clientes já possuem a conta que está sendo associada
    SELECT COUNT(*) INTO qtd_clientes_conta
    FROM clientes_has_contas
    WHERE contas_num_conta = NEW.contas_num_conta;

	IF qtd_clientes_conta >= 2 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Uma conta não pode ter mais de dois clientes associados a ela.';
	END IF;

    -- Conta quantas contas o cliente tem na agência da conta que está sendo associada a ele
    SELECT COUNT(*) INTO cliente_has_conta_in_agencia
    FROM clientes_has_contas, contas
    WHERE
		contas_num_conta = num_conta AND
        clientes_cpf = NEW.clientes_cpf AND
        agencias_num_ag = (
			SELECT agencias_num_ag
			FROM contas
			WHERE num_conta = NEW.contas_num_conta
		);

	IF cliente_has_conta_in_agencia > 0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Um cliente só pode ter uma conta por agência.';
	END IF;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`contas_BEFORE_INSERT` $$
USE `Equipe521459`$$
-- Verifica se o funcionário associado a conta a ser inserida possui o cargo de 'gerente'
-- Verifica se o gerente associado a conta pertence a mesma agência a qual a conta está sendo associada

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`contas_BEFORE_INSERT` BEFORE INSERT ON `contas` FOR EACH ROW
BEGIN
	DECLARE funcionario_cargo VARCHAR(10);
    DECLARE funcionario_agencia INT;

    SELECT cargo, agencias_num_ag INTO funcionario_cargo, funcionario_agencia
    FROM funcionarios
    WHERE matricula = NEW.funcionarios_matricula_gerente;

    IF funcionario_cargo <> 'gerente' THEN
    	SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Somente um funcionário com cargo de "gerente" pode ser associado a gerente de uma conta.';
	END IF;

    IF funcionario_agencia <> NEW.agencias_num_ag THEN
    	SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'O gerente da conta deve pertencer a mesma agência da conta.';
	END IF;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`contas_BEFORE_UPDATE` $$
USE `Equipe521459`$$
-- Verifica se o funcionário associado a conta a ser atualizada possui o cargo de 'gerente'
-- Verifica se o gerente associado a conta pertence a mesma agência a qual a conta está sendo associada

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`contas_BEFORE_UPDATE` BEFORE UPDATE ON `contas` FOR EACH ROW
BEGIN
	DECLARE funcionario_cargo VARCHAR(10);
    DECLARE funcionario_agencia INT;

	-- Só executa se o gerente da conta tiver sido alterado
	IF OLD.funcionarios_matricula_gerente <> NEW.funcionarios_matricula_gerente THEN
		SELECT cargo, agencias_num_ag INTO funcionario_cargo, funcionario_agencia
		FROM funcionarios
		WHERE matricula = NEW.funcionarios_matricula_gerente;

		IF funcionario_cargo <> 'gerente' THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Somente um funcionário com cargo de "gerente" pode ser associado a gerente de uma conta.';
		END IF;

		IF funcionario_agencia <> NEW.agencias_num_ag THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'O gerente da conta deve pertencer a mesma agência da conta.';
		END IF;
    END IF;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`dependentes_BEFORE_INSERT` $$
USE `Equipe521459`$$
-- Limita em 5 a quantidade de dependentes que um funcionário pode ter

-- ! ALTERAÇÃO: Adiciona cálculo da idade do dependente
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`dependentes_BEFORE_INSERT` BEFORE INSERT ON `dependentes` FOR EACH ROW
BEGIN
	DECLARE num_dependentes INT;

    -- Conta a quantidade de dependentes do funcionário que está sendo associdado ao dependente inserido
    SELECT COUNT(nome_dependente) INTO num_dependentes
    FROM dependentes
    WHERE funcionarios_matricula = NEW.funcionarios_matricula;

    IF num_dependentes >= 5 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Um funcionário não pode ter mais que 5 dependentes.';
	END IF;

	SET NEW.idade = TIMESTAMPDIFF(YEAR, NEW.data_nasc, CURDATE());

END$$

-- ! ALTERAÇÃO: Adiciona cálculo da idade do dependente

USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`dependentes_BEFORE_UPDATE` $$
USE `Equipe521459`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`dependentes_BEFORE_UPDATE` BEFORE UPDATE ON `dependentes` FOR EACH ROW
BEGIN
	SET NEW.idade = TIMESTAMPDIFF(YEAR, NEW.data_nasc, CURDATE());
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`funcionarios_BEFORE_INSERT` $$
USE `Equipe521459`$$
-- Confere o piso salarial do funcionário inserido

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`funcionarios_BEFORE_INSERT` BEFORE INSERT ON `funcionarios` FOR EACH ROW
BEGIN
	IF NEW.salario < 2286.00 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Um funcionário não pode ter o salário menor que 2.286,00.';
	END IF;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`funcionarios_AFTER_INSERT` $$
USE `Equipe521459`$$
-- Atualiza o sal_total da agência em que o funcionário foi inserido

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`funcionarios_AFTER_INSERT` AFTER INSERT ON `funcionarios` FOR EACH ROW
BEGIN
	UPDATE agencias
    SET sal_total = (
		SELECT SUM(salario)
        FROM funcionarios
        WHERE agencias_num_ag = NEW.agencias_num_ag
    )
    WHERE num_ag = NEW.agencias_num_ag;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`funcionarios_BEFORE_UPDATE` $$
USE `Equipe521459`$$
-- Confere o piso salarial do funcionário atualizado

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`funcionarios_BEFORE_UPDATE` BEFORE UPDATE ON `funcionarios` FOR EACH ROW
BEGIN
	IF NEW.salario < 2286.00 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Um funcionário não pode ter o salário menor que 2.286,00.';
	END IF;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`funcionarios_AFTER_UPDATE` $$
USE `Equipe521459`$$
-- Atualiza o sal_total da agência do funcionário atualizado

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`funcionarios_AFTER_UPDATE` AFTER UPDATE ON `funcionarios` FOR EACH ROW
BEGIN
	-- TRIGGER Executa somente se o salário OU a agência do funcionário tiver sido alterado(a)
	IF OLD.salario <> NEW.salario OR OLD.agencias_num_ag <> NEW.agencias_num_ag THEN
		-- Atualiza o sal_total da antiga agência do funcionário
		UPDATE agencias
		SET sal_total = (
			SELECT SUM(salario)
			FROM funcionarios
			WHERE agencias_num_ag = OLD.agencias_num_ag
		)
		WHERE num_ag = OLD.agencias_num_ag;

		-- Se a agência tiver sido alterada, atualiza também o sal_total da nova agência
		IF OLD.agencias_num_ag <> NEW.agencias_num_ag THEN
			UPDATE agencias
			SET sal_total = (
				SELECT SUM(salario)
				FROM funcionarios
				WHERE agencias_num_ag = NEW.agencias_num_ag
			)
			WHERE num_ag = NEW.agencias_num_ag;
		END IF;
	END IF;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`funcionarios_AFTER_DELETE` $$
USE `Equipe521459`$$
-- Atualiza o sal_total da agência do funcionário deletado

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`funcionarios_AFTER_DELETE` AFTER DELETE ON `funcionarios` FOR EACH ROW
BEGIN
	UPDATE agencias
    SET sal_total = (
		SELECT SUM(salario)
        FROM funcionarios
        WHERE agencias_num_ag = OLD.agencias_num_ag
    )
    WHERE num_ag = OLD.agencias_num_ag;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`transacoes_BEFORE_INSERT` $$
USE `Equipe521459`$$
-- Verifica se a conta associada a transação possui saldo para faze-la
-- Verifica se transferência e PIX possuem conta de destino

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`transacoes_BEFORE_INSERT` BEFORE INSERT ON `transacoes` FOR EACH ROW
BEGIN
	DECLARE saldo_atual REAL;
    DECLARE limite_credito_especial REAL;

	-- Somente movimentações de saída precisam de saldo em conta
	IF NEW.tipo IN('saque', 'pagamento', 'transferência', 'PIX') THEN
		SELECT saldo INTO saldo_atual
        FROM contas
        WHERE num_conta = NEW.contas_num_conta_origem;

        -- Obtem o limite de crédito se a conta for especial
        SELECT limite_credito INTO limite_credito_especial
        FROM contas_especial
        WHERE contas_num_conta = NEW.contas_num_conta_origem;

        -- Caso a conta não seja especial, o limite de crédito é 0
        IF limite_credito_especial IS NULL THEN
			SET limite_credito_especial = 0;
		END IF;

        -- Saldo em conta + limite de crédito especial (se houver) devem ser maior ou igual ao valor da transação
        IF (saldo_atual + limite_credito_especial) < NEW.valor THEN
			SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'A conta não possui saldo e/ou crédito para realizar esta transação.';
        END IF;
    END IF;

	-- Verifica se transferência e PIX possuem conta de destino
    IF NEW.tipo IN('transferência', 'PIX') AND NEW.contas_num_conta_destino IS NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Transferência e PIX devem possuir uma conta de destino.';
    END IF;
END$$


USE `Equipe521459`$$
DROP TRIGGER IF EXISTS `Equipe521459`.`transacoes_AFTER_INSERT` $$
USE `Equipe521459`$$
-- Atualiza o saldo da conta e o limite de crédito (se for o caso) ao inserir uma transação

CREATE DEFINER = CURRENT_USER TRIGGER `Equipe521459`.`transacoes_AFTER_INSERT` AFTER INSERT ON `transacoes` FOR EACH ROW
BEGIN
    DECLARE current_saldo REAL;
    DECLARE value_to_sub_on_saldo REAL;
    DECLARE value_to_sub_on_limite_credito REAL;

	-- Transações que debitam saldo da conta ou do limite crédito
    IF NEW.tipo IN('saque', 'pagamento', 'transferência', 'PIX') THEN
		-- Obtem o saldo atual
		SELECT saldo INTO current_saldo
		FROM contas
		WHERE num_conta = NEW.contas_num_conta_origem;

        -- Verifica qual o valor a ser debitado do saldo e do limite de crédito se for necessário
		IF current_saldo - NEW.valor < 0 THEN
			SET value_to_sub_on_saldo = current_saldo;
			SET value_to_sub_on_limite_credito = NEW.valor - value_to_sub_on_saldo;
		ELSE
			SET value_to_sub_on_saldo = NEW.valor;
		END IF;

        -- Se houver débito de saldo, atualiza o saldo da conta
		IF value_to_sub_on_saldo > 0 THEN
			UPDATE contas
			SET saldo = saldo - value_to_sub_on_saldo
			WHERE num_conta = NEW.contas_num_conta_origem;
		END IF;

		-- Se houver dábito de crédito, atualiza o limite de crédito
		IF value_to_sub_on_limite_credito > 0 THEN
			UPDATE contas_especial
			SET limite_credito = limite_credito - value_to_sub_on_limite_credito
			WHERE contas_num_conta = NEW.contas_num_conta_origem;
		END IF;

		-- Transferência e PIX subtraem da conta origem e somam ao saldo da conta destino
		IF NEW.tipo IN ('transferência','PIX') THEN
			UPDATE contas
			SET saldo = saldo + NEW.valor
			WHERE num_conta = NEW.contas_num_conta_destino;
		END IF;
	END IF;

	-- Deposito e estorno somam ao saldo da conta
    IF NEW.tipo IN ('deposito','estorno') THEN
		UPDATE contas
        SET saldo = saldo + NEW.valor
        WHERE num_conta = NEW.contas_num_conta_origem;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
